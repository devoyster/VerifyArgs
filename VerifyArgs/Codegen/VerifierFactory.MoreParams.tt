<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace VerifyArgs.Codegen
{
	partial class VerifierFactory
	{
<#
for (int i = 2; i <= 14; i++)
{
	var genericParams = string.Join(", ", Enumerable.Range(1, i).Select(j => "T" + j));

	Action renderParamsDoc =
		() =>
		{
			for (int j = 1; j <= i; j++)
			{
#>
		/// <typeparam name="T<#= j #>">Additional non-constant argument #<#= j #> type.</typeparam>
<#
			}
		};

	if (i > 2)
	{
#>

<#
	}
#>
		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
<#
	renderParamsDoc();
#>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, <#= genericParams #>, Arguments<THolder>> Create<THolder, TArg, <#= genericParams #>>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, <#= genericParams #>, bool>> checkExpr,
			Expression<Func<string, TArg, <#= genericParams #>, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, <#= genericParams #>, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
<#
	renderParamsDoc();
#>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, <#= genericParams #>, Arguments<THolder>> Create<THolder, TArg, <#= genericParams #>>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, <#= genericParams #>, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, <#= genericParams #>, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}
<#
}
#>
	}
}
