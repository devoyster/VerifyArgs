//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace VerifyArgs.Codegen
{
	partial class VerifierFactory
	{
		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, Arguments<THolder>> Create<THolder, TArg, T1, T2>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, Arguments<THolder>> Create<THolder, TArg, T1, T2>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <typeparam name="T12">Additional non-constant argument #12 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <typeparam name="T12">Additional non-constant argument #12 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <typeparam name="T12">Additional non-constant argument #12 type.</typeparam>
		/// <typeparam name="T13">Additional non-constant argument #13 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <typeparam name="T12">Additional non-constant argument #12 type.</typeparam>
		/// <typeparam name="T13">Additional non-constant argument #13 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <typeparam name="T12">Additional non-constant argument #12 type.</typeparam>
		/// <typeparam name="T13">Additional non-constant argument #13 type.</typeparam>
		/// <typeparam name="T14">Additional non-constant argument #14 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check is failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, bool>> checkExpr,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Arguments<THolder>>>(propertyFilter, checkExpr, createExceptionExpr);
		}

		/// <summary>
		/// Creates verifier which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="createExceptionExpr" />.</typeparam>
		/// <typeparam name="T1">Additional non-constant argument #1 type.</typeparam>
		/// <typeparam name="T2">Additional non-constant argument #2 type.</typeparam>
		/// <typeparam name="T3">Additional non-constant argument #3 type.</typeparam>
		/// <typeparam name="T4">Additional non-constant argument #4 type.</typeparam>
		/// <typeparam name="T5">Additional non-constant argument #5 type.</typeparam>
		/// <typeparam name="T6">Additional non-constant argument #6 type.</typeparam>
		/// <typeparam name="T7">Additional non-constant argument #7 type.</typeparam>
		/// <typeparam name="T8">Additional non-constant argument #8 type.</typeparam>
		/// <typeparam name="T9">Additional non-constant argument #9 type.</typeparam>
		/// <typeparam name="T10">Additional non-constant argument #10 type.</typeparam>
		/// <typeparam name="T11">Additional non-constant argument #11 type.</typeparam>
		/// <typeparam name="T12">Additional non-constant argument #12 type.</typeparam>
		/// <typeparam name="T13">Additional non-constant argument #13 type.</typeparam>
		/// <typeparam name="T14">Additional non-constant argument #14 type.</typeparam>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExprFunc">Function which generates property value check expression (if returns true then check is failed).
		/// Function obtains variable which holds property value and additional arguments.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Verifier instance.</returns>
		public static Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Arguments<THolder>> Create<THolder, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(
			Func<Type, bool> propertyFilter,
			Func<Expression, IList<ParameterExpression>, Expression> checkExprFunc,
			Expression<Func<string, TArg, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Exception>> createExceptionExpr) where THolder : class
		{
			return Create<Func<Arguments<THolder>, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, Arguments<THolder>>>(propertyFilter, checkExprFunc, createExceptionExpr);
		}
	}
}
