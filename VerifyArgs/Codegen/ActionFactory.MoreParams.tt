<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Linq.Expressions;

namespace VerifyArgs.Codegen
{
	partial class ActionFactory
	{
<#
for (int i = 2; i <= 14; i++)
{
	var genericParams = string.Join(", ", Enumerable.Range(1, i).Select(j => "T" + j));

	if (i > 2)
	{
#>

<#
	}
#>
		/// <summary>
		/// Generates action which checks object public properties.
		/// </summary>
		/// <typeparam name="THolder">Anonymous object type.</typeparam>
		/// <typeparam name="TArg">Common arguments supertype used in <paramref name="checkExpr" /> and <paramref name="createExceptionExpr" />.</typeparam>
<#
	for (int j = 1; j <= i; j++)
	{
#>
		/// <typeparam name="T<#= j #>">Additional non-constant parameter #<#= j #> type.</typeparam>
<#
	}
#>
		/// <param name="propertyFilter">Object public properties filter; can be null to generate code for all the properties.</param>
		/// <param name="checkExpr">Property value check lambda expression; if returns true then check id failed.</param>
		/// <param name="createExceptionExpr">New exception creation expression used when check is failed.</param>
		/// <returns>Object check action.</returns>
		public static Action<THolder, <#= genericParams #>> Generate<THolder, TArg, <#= genericParams #>>(
			Func<Type, bool> propertyFilter,
			Expression<Func<TArg, <#= genericParams #>, bool>> checkExpr,
			Expression<Func<string, TArg, <#= genericParams #>, Exception>> createExceptionExpr)
		{
			return Generate<Action<THolder, <#= genericParams #>>>(propertyFilter, checkExpr, createExceptionExpr);
		}
<#
}
#>
	}
}
